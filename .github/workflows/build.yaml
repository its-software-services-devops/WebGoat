name: WebGoat Demo

on:
  push:
    branches: [ develop, master ]
    tags: ['v*.*.*']

env:
  ENV_GCR_IMAGE: gcr.io/its-artifact-commons/web-goat
  RUN_REGION: asia-southeast1
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:

  build-and-deploy:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v2

    - name: Prepare
      id: prep
      run: |
        DOCKER_IMAGE=itssoftware/web-goat
        GCR_IMAGE=$ENV_GCR_IMAGE
        VERSION=latest
        GIT_HASH=$(git rev-parse --short "$GITHUB_SHA")
        SERVICE_NAME=web-goat-dev
        CLOUDRUN_PROJECT_ID=its-artifact-commons

        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
          SERVICE_NAME=web-goat-prod
          CLOUDRUN_PROJECT_ID=its-artifact-commons
        elif [[ $GITHUB_REF == refs/heads/* ]]; then
          BRANCH=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
          VERSION=$BRANCH-$GIT_HASH

          if [[ $BRANCH == 'master' ]]; then
            SERVICE_NAME=web-goat-test
          fi          
        fi

        TAGS="${DOCKER_IMAGE}:${VERSION}"
        GCR_TAGS="${GCR_IMAGE}:${VERSION}"

        if [[ $VERSION =~ ^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
          MINOR=${VERSION%.*}
          MAJOR=${MINOR%.*}
          TAGS="$TAGS,${DOCKER_IMAGE}:${MINOR},${DOCKER_IMAGE}:${MAJOR},${DOCKER_IMAGE}:latest"
        elif [ "${{ github.event_name }}" = "push" ]; then
          TAGS="$TAGS,${DOCKER_IMAGE}:sha-${GITHUB_SHA::8}"
        fi

        echo ::set-output name=tags::${TAGS}
        echo ::set-output name=gcr_tags::${GCR_TAGS}
        echo ::set-output name=version::${VERSION}
        echo ::set-output name=cloudrun_service::${SERVICE_NAME}
        echo ::set-output name=cloud_run_project_id::${CLOUDRUN_PROJECT_ID}

    - name: Line notification start
      uses: snow-actions/line-notify@v1.0.0
      with:
        access_token: ${{ secrets.LINE_ACCESS_TOKEN }}
        message: "Start building [web-goat] [${{ steps.prep.outputs.version }}]..."

    - name: Set up JDK 15
      uses: actions/setup-java@v2
      with:
        distribution: 'zulu'
        java-version: 15
        architecture: x64

    - name: Cache Maven packages
      uses: actions/cache@v2.1.5
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Build with Maven
      run: |
        mvn versions:set -DnewVersion=${{ steps.prep.outputs.version }}
        mvn clean install -DskipTests
#    - name: SonarScanner for .NET 5 with pull request decoration support
#      uses: highbyte/sonarscan-dotnet@2.0
#      with:
#        # The key of the SonarQube project
#        sonarProjectKey: its-software-services-jenuine_WebGoat
#        # The name of the SonarQube project
#        sonarProjectName:  web-goat
#        # The name of the SonarQube organization in SonarCloud. For hosted SonarQube, skip this setting.
#        sonarOrganization: its-software-services-jenuine
#        # Optional command arguments to dotnet test
#        dotnetTestArguments: --logger trx --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
#        # Optional extra command arguments the the SonarScanner 'begin' command
#        sonarBeginArguments: /d:sonar.cs.opencover.reportsPaths="**/TestResults/**/coverage.opencover.xml" -d:sonar.cs.vstest.reportsPaths="**/TestResults/*.trx"
                
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Activate GCP service account
      uses: google-github-actions/github-actions/setup-gcloud@master
      with:
        service_account_email: ${{ secrets.GCR_EMAIL }}
        service_account_key: ${{ secrets.GCR_KEY }}

    - name: GCR Authen
      run: |
        # Set up docker to authenticate
        # via gcloud command-line tool.
        gcloud auth configure-docker

#    - name: Build and push images
#      uses: docker/build-push-action@v2
#      with:
#        file: Dockerfile
#        push: true
#        load: false
#        tags: ${{ steps.prep.outputs.gcr_tags }}
#        build-args: version=${{ steps.prep.outputs.version }}

    - name: "Build and push"
      uses: docker/build-push-action@v2.4.0
      with:
        context: ./docker
        file: docker/Dockerfile
        push: true
        platforms: linux/amd64
        tags: ${{ steps.prep.outputs.gcr_tags }}
        build-args: |
          webgoat_version=${{ steps.prep.outputs.version }}

    # Activate SA for Cloud Run deployment
    - name: Activate GCP service account
      uses: google-github-actions/github-actions/setup-gcloud@master
      with:
        service_account_email: ${{ secrets.GCR_EMAIL }}
        service_account_key: ${{ secrets.GCR_KEY }}

    # Configure gcloud CLI
    - name: gcloud Set up
      run: |
          gcloud config set project ${{ steps.prep.outputs.cloud_run_project_id }}

    # Deploy image to Cloud Run
    - name: Deploy
      run: |
          gcloud run deploy ${{ steps.prep.outputs.cloudrun_service }} \
            --region $RUN_REGION \
            --image ${{ steps.prep.outputs.gcr_tags }} \
            --platform managed

    - name: show job status
      if: always()
      uses: snow-actions/line-notify@v1.0.0
      with:
        access_token: ${{ secrets.LINE_ACCESS_TOKEN }}
        message: "Done building [web-goat] [${{ steps.prep.outputs.version }}] with status [${{job.status}}]"
